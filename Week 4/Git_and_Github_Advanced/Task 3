#Task 3: Stashing - Save Work Without Committing
Scenario: You need to switch branches but don’t want to commit incomplete work.

Solution:
✅1. Steps and Explanation:
Modify a file without committing:

echo "Temporary Change" >> temp.txt
Appends "Temporary Change" to temp.txt.

✅2. Stage the file:

git add temp.txt
Adds temp.txt to the staging area. This is optional—Git stash saves both staged and unstaged changes by default.

✅3. Stash the changes:

 git stash

. When you run git stash, Git temporarily saves your changes — both the ones you've staged and the ones you haven't — and 
  then resets your working directory to how it looked in the last commit (called HEAD).
. This lets you switch branches or do other work without losing your progress.
. Git stores each stash like a note in a stack (a list), so you can come back to it later. To see all your saved stashes, just run:
  Run: git stash list

✅4. Switch to another branch:

git checkout main
Switches to the main branch safely, now that your work is stashed.

✅5. Apply the stash (and remove it from stash list):

git stash pop
. Re-applies the most recent stash and removes it from the stash stack.
